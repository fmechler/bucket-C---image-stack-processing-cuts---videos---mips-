
function   FlyThroughVideo(brnIDs, modes)

% function   FlyThroughVideo(brnIDs, modes)
%
% Execute these scripts in Matlab on mitragpu2 or another compute server equivalently set up
% brnIDs is a cell array of strings, each a full brain id, e..g., 'PMD1485',  or 'Hua73'
% the fly-through video is generated sequentially for each brain in the brnIDs list
% each video is generated form a set of thumbnail images sitting in a
% folder in a directory dictated by convention and named for the brain with a syntax dictated by convention
% CALLS:  
%  MaskImagesBatch2.m
%  ffmpeg
% Written by Ferenc Mechler  2014

%% This script works from a set of transformed PNGs of the right size (~750 x 562)
%  that are larger than the thumbnails routinly generated by the B&B image transformation for portal thumbnail viewing
%  and can be generated command line calls to ApplyTFormTIF_db in
%  mitragpu2:/data1/PORTAL_VIDEOS/
%  as in the example below
% NOTE:
% (0) ./ApplyTFormTIF_db will not work if called by 'system' within matlab
% (1) the first input argument is the image-list txt file, which is obtained in the StackAlign step of registration and is saved in some directory; it can be anything but the example below assumes that directory is /home/ferenc/zvideos/zStackAlignTxtFiles/
% (2) the second input argument is the folder name of the output (of the thumbnails that are to be generated)
%
%   cd mitragpu2:/data1/PORTAL_VIDEOS/
%   cp /home/ferenc/zvideos/zStackAlignTxtFiles/PMDXXXX_IHC_XForm.txt .
%   ./ApplyTFormTIF_db PMDXXXX_IHC_XForm.txt  PMDXXXX_IHC_PNGS
%   ./ApplyTFormTIF_db PMDXXXX_F_XForm.txt  PMDXXXX_F_PNGS
%   ./ApplyTFormTIF_db PMDXXXX_N_XForm.txt  PMDXXXX_N_PNGS


%% jj = [2488 2489 2490 2492 2493 2494 2495 2499 2500 2503 2504];
% brnIDs = {'PMD2051', 'PMD2051'};
nBrn = numel(brnIDs);

if nargin < 2
    modes = 1;
end;
if nargin == 2 & (any(modes<1) | any(modes>2))
    fprintf(1,'The second argument (modes) is an integer array and permitted to take values only from the [1 2] set\n');
    fprintf(1,'      where ''1'' stands for label (i.e., ''F'' or ''IHC''), and ''2'' stands for Nissl (i.e., ''N'')\n');
    return;
end;
modes=unique(modes);
modes=modes(:)';

% GENERATE IHC or F or N  VIDEO
for ivideo=1:nBrn
    rootdir = ['/data1/PORTAL_VIDEOS'];
    rootdir1 = ['/home/ferenc/'];
    
    % Generate masked+registered PNGs
    dirnm = [brnIDs{ivideo} '_*_PNGS'];
    d_pngs = dir([rootdir filesep dirnm]);
    n_modality = numel(d_pngs);
    
    % for each brain, generate one or two videaos: one for each requested
    % image modality, where the assumption is the MBA convention used for PMD data, specifically
    % that there are at most two modalities available
    % and that the first modality available is a label modality (i.e., 'F' or 'IHC' but not both)
    % and that the Nissl modality (i.e., 'N'), if available, is always the second modality
    % (which, assuming adherence to the above MBA conventions, is guaranteed by alphabetical order)
    for i_modality = modes %n_modality
        if i_modality > n_modality
            fprintf(1,'The folder with thumbnail images for the requested ''modes''=%d was not found\n',i_modality);
            fprintf(1,'      where modes = ''1'' stands for label (i.e., ''F'' or ''IHC''), and ''2'' stands for Nissl (i.e., ''N'')\n');
            return;
        else
            dirnm = d_pngs(i_modality).name;
            dirin = [rootdir filesep dirnm];
            dirout = [rootdir1 filesep dirnm '_MSK'];
            
            d_png_in = dir([dirin filesep '*.png']);
            n_in = numel(d_png_in);
            n1=zeros(n_in,1);
            n0=zeros(n_in,1);
            for i=1:n_in
                n1(i)=sscanf(d_png_in(i).name(1:4),'%04d');
                n0(i)=sscanf(d_png_in(i).name(end-[7:-1:4]),'%04d');
            end
            nn_range=min(n0):max(n0);
            nn_missing = nn_range(~ismember(nn_range,n0));
            nn_range_length = 1+diff(nn_range([1 end]))
            
            %MaskImagesBatch1(dirin, dirout)
            MaskImagesBatch2(dirin, dirout)
            
            I_C = imfinfo([dirout filesep '0001_masked_C.png']);
            I_S = imfinfo([dirout filesep '0001_masked_S.png']);
            I_T = imfinfo([dirout filesep '0001_masked_T.png']);
            Nw_C = I_C.Width;
            Nh_C = I_C.Height;
            Nw_S = I_S.Width;
            Nh_S = I_S.Height;
            Nw_T = I_T.Width;
            Nh_T = I_T.Height;
            
            %png_downsampling_factor = 32; %[downsampling factor used by Amit's code ./ApplyTFormTIF_db to generate *.png section images that are output in folders named PMD%04d_F_PNGS
            png_downsampling_factor = 16; %[downsampling factor used by Amit's code ./ApplyTFormTIF_db to generate *.png section images that are output in folders named PMD%04d_F_PNGS
            full_res_coronal_pxl = 0.45;  % [um]
            coronal_png_pxl = png_downsampling_factor*full_res_coronal_pxl; % == 32*0.45 ~ 14.4 um < 16 um
            coronal_spacing = 40; % applies to sections in alternate N or Label series in conventional MBAmaterial
            
            pxW_C=coronal_png_pxl; pxH_C=coronal_png_pxl;
            pxW_S=coronal_spacing; pxH_S=coronal_png_pxl;
            pxW_T=coronal_spacing; pxH_T=coronal_png_pxl;
            
            aspectratio_C = (pxW_C*Nw_C)/(pxH_C*Nh_C);
            aspectratio_S = (pxW_S*Nw_S)/(pxH_S*Nh_S);
            aspectratio_T = (pxW_T*Nw_T)/(pxH_T*Nh_T);
            fprintf(1,'aspectratio_C = %6.3f\n',aspectratio_C);
            fprintf(1,'aspectratio_S = %6.3f\n',aspectratio_S);
            fprintf(1,'aspectratio_T = %6.3f\n',aspectratio_T);
            
            % STEP3: Generate videos
            command=['ffmpeg -y -r 10 -f image2 -i ' dirout filesep '%4d_masked_C.png -r 10 -vb 20M -aspect ' num2str(aspectratio_C,3) ' ' dirout '_C.mp4']
            system(command)
            fprintf(' completed CORONAL video %d  -- for %s\n',ivideo, dirnm);
            command=['ffmpeg -y -r 10 -f image2 -i ' dirout filesep '%4d_masked_S.png -r 10 -vb 20M -aspect ' num2str(aspectratio_S,3) ' ' dirout '_S.mp4']
            system(command)
            fprintf(' completed SAGITTAL video %d  -- for %s\n',ivideo, dirnm);
            command=['ffmpeg -y -r 10 -f image2 -i ' dirout filesep '%4d_masked_T.png -r 10 -vb 20M -aspect ' num2str(aspectratio_T,3) ' ' dirout '_T.mp4']
            system(command)
            fprintf(' completed TRANSVERSE video %d  -- for %s\n\n\n',ivideo, dirnm);
        end; % if i_modality...
    end; % for i_modality
end;


